variables:
  - name: BuildPlatform
    value: 'any cpu'
  - name: BuildConfiguration
    value: 'release'
  - group: AT Shared Resources
  - group: KeyVault - dss-at-shared-kv

resources:
  repositories:
  - repository: self

jobs:
- job: BuildAndTest
  displayName: BuildAndTest
  pool: Continuous Integration 02 - SSD - 160ACU

  steps:
  # Run PowerShell tests and publish results
  - task: PowerShell@2
    name: InvokeTests
    displayName: 'Invoke-Tests'
    inputs: 
     targetType: 'filePath'
     filePath: $(System.DefaultWorkingDirectory)/Tests/Invoke-Tests.ps1
     arguments: -CodeCoveragePath $(System.DefaultWorkingDirectory)\Scripts\*.ps1
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
     testResultsFormat: NUnit
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
     summaryFileLocation: '**/CODECOVERAGE-*.xml'
  - task: PowerShell@2
    name: OutputTests
    displayName: 'Out-TestResults'
    inputs: 
     targetType: 'filePath'
     filePath: $(System.DefaultWorkingDirectory)/Tests/Out-TestResults.ps1
     arguments: '-CoveragePercent 10'
  # Publish PowerShell artifacts
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: FunctionAppTools'
    inputs:
      pathtoPublish: FunctionAppTools
      artifactName: FunctionAppTools
      publishLocation: container
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Modules'
    inputs:
      pathtoPublish: Modules
      artifactName: Modules
      publishLocation: container 
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Scripts'
    inputs:
      pathtoPublish: Scripts
      artifactName: Scripts
      publishLocation: container       

- job: BuildNCSDSSAnonymiseBackup
  displayName: Build and publish NCS.DSS.AnonymiseBackup container
  pool: 'Hosted Ubuntu 1604'
  variables:
    AppImageName: $(Build.SourceBranchName)-$(Build.BuildId)
  steps:
  - script: |
      cd .\Applications\NCS.DSS.AnonymiseBackup
      docker build -t $(ContainerRegistryAdminUser).azurecr.io/$(AppImageName) .
    displayName: 'Build anonapp container'
  - script: |
      docker login -u $(ContainerRegistryAdminUser) -p $(ContainerRegistryPassword) $(ContainerRegistryAdminUser).azurecr.io
      docker push $(ContainerRegistryAdminUser).azurecr.io/$(AppImageName)
    displayName: 'Publish anonapp container'